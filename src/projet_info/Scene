package projet_info;
import javax.swing.ImageIcon;


import java.awt.Color;
import java.awt.Font;

import projet_info.Astre;
//import javax.swing.JFrame;
import javax.swing.JPanel;

import audio.Audio;

import java.awt.Graphics;
import java.awt.Image;
import java.util.ArrayList;
import java.util.Random;
import java.awt.Graphics2D;

@SuppressWarnings("serial")
public class Scene extends JPanel {
	
	//*** CREATION DES VARIABLES ***// 
	private ImageIcon IcoFond;
	private Image ImFond;
	private int taille_case_x;  
	private int taille_case_y;  
	
	private int xFond; // l'absc de l'image de fond
	private int yFond;
	private int dx;
	private int dy; //deplacement vertical de l écran
	
	//variables relatives au tableau
	private int xrect1; //
	private int yrect1; //
	private int dxrect1; //
	private int dyrect1; //
	
	//2 variables pour bouger le joueur 1
	private int dyjoueur1;
	private int dxjoueur1;
	
	//2 joueurs créés
	public Joueur perso1;
	public Joueur perso2;
	
	//tableau contenant les astres
	static ArrayList<Astre> tabObjets;
	
	//image utilisée pour changer l'image du joueur2
	public ImageIcon icoObj2;
	public Image imgObj2;
	
	private String gagnant;
	static Boolean partiegagnee;
	private boolean ok;
	
	//*** LE CONSTRUCTEUR ***//
	public Scene() {
		
		super(); // faire appel au constructeur de la super classe
		this.xFond = 0; // commence par initialiser les variables position
		this.yFond = 0;
		this.taille_case_x = 77; 
		this.taille_case_y = 77; 
		this.dx = 0;
		this.dy = 0;
		
		this.xrect1 = 4; 
		this.yrect1 = 4; 
		this.dxrect1 = 0;
		this.dyrect1 = 0;
	
		//téléchargement de l'image de fond
		IcoFond = new ImageIcon(getClass().getResource("fond.png"));
		this.ImFond = this.IcoFond.getImage();
		
		//on initialise les joueurs 
		this.perso1 = new Joueur("", 0, 0);
		this.perso2 = new Joueur("", 308, 308);
		
		//changement de l'image du joueur 2 pour les différencier
		icoObj2 = new ImageIcon(getClass().getResource("joueur2.png"));
		imgObj2 = this.icoObj2.getImage();
		perso2.setIcoObj(this.icoObj2);
		perso2.setImgObj(this.imgObj2);
		
		
		//création automatique des astres
		tabObjets = new ArrayList<Astre>(); 
		for(int i =0; i<= 28; i++){
			Random random = new Random();
			int nb1;
			int nb2;
			int nb3;
			nb1 = random.nextInt(9);
			nb2 = random.nextInt(7);
			nb3 = random.nextInt((3000-450)+1)+ 450;
			Astre aastre = new Astre("astre" + i, nb3, 5+taille_case_x*nb1, 5+taille_case_y*nb2, 1, i*0.05);
			this.tabObjets.add(aastre);}
	
		this.setFocusable(true);
		this.requestFocusInWindow();
		this.addKeyListener(new Clavier()); //pour écouter le clavier 
		
		//creation d une instance du chrono
		Thread chronoEcran = new Thread(new Chrono());
		chronoEcran.start();
		
		this.gagnant = "";	
		this.partiegagnee = false;
		this.ok = true;
	}
	
	//*** GETTERS SETTERS ****// 
	
	public int getDx() {return dx;} // pour accéder à la valeur de dx
	public void setDx(int dx) {this.dx = dx;} // pour la modifier
	public int getDy() {return dy;}
	public void setDy(int dy) {this.dy = dy;}
	public int getxFond() {return xFond;}
	public void setxFond(int xFond) {this.xFond = xFond;}
	public int getyFond() {return yFond;}
	public void setyFond(int yFond) {this.yFond = yFond;}
	public void setDxrect1(int dxrect1) {this.dxrect1 = dxrect1;}
	public void setDyrect1(int dyrect1) {this.dyrect1 = dyrect1;}
	public static Boolean getPartiegagnee() {return partiegagnee;}

	//*** LES METHODES ***//
	
	//méthode retournant l'astre pouvant être conquis par un joueur 
	public static Astre peut_conquérir_astres(Joueur j) {	
		Astre res = null;
		for(int i=0; i<tabObjets.size();i++) {
			Astre a = tabObjets.get(i);
			if(Math.abs(j.getX()- a.getX())<=30 && Math.abs(j.getY()- a.getY())<=30 && a.conquis == false && a.points_conquetes <= j.points_conquetes){
				res = a;}
	}
		return res; }
	
	//méthode retournant l'astre pouvant être attaqué 
	public static Astre peut_attaquer(Joueur j1, Joueur j2) {
		Astre res = null;
		Astre astre_attaque = null;
		
		//on regarde si le joueur1 est sur un astre
		for(int i=0; i<tabObjets.size();i++) {
			if(Math.abs(j1.getX() - tabObjets.get(i).getX())<30 && Math.abs(j1.getY() - tabObjets.get(i).getY())<30 ) 
				astre_attaque = tabObjets.get(i);}
		
		//on regarde si cet astre est dans les territoires du joueur2
		for(int i1=0; i1<j2.getTerritoires().size(); i1++) {
			if(j2.getTerritoires().get(i1) == astre_attaque) 
				res = astre_attaque;}
		return res ;
		}
	
	//méthode donnant la taille totale de toutes les étoiles du jeu
	public static int getTaille() {
		int taille_totale = 0;
		for(int i =0; i<= Scene.tabObjets.size(); i++){
			taille_totale = taille_totale + Scene.tabObjets.get(i).getTaille();
				}
		return taille_totale;	
	}

	//*** TRANSLATION *** méthode servant initialement à bouger l'image de fond 
	/*public void Deplacmtfond() {
		this.xFond += this.dx;
		this.yFond += this.dy;
		this.xrect1 += this.dxrect1; 
		this.yrect1 += this.dyrect1; 
	} */
	
	//*** TRANSLATION *** méthode servant initialement à bouger les vaisseaux
	/*public void Deplacmtvaisseau() {
		perso1.setX(perso1.getX() + dx);
		perso1.setY(perso1.getY() + dy);
		perso2.setX(perso2.getX() + dx);
		perso2.setY(perso2.getY() + dy);	
	} */
	
	
	@SuppressWarnings("exports")
	public void création_grille(Graphics g) {       
		Graphics gg = (Graphics2D)g;                
		for (int i = 0; i<11; i++ ) {
			for (int j = 0; j<9; j++) {
				gg.drawRect(xrect1+(taille_case_x)*i, yrect1+(taille_case_y)*j, taille_case_x, taille_case_y);
				gg.setColor(Color.WHITE);}}
	}

	
	private boolean partieGagnee() {   //problème: pas de son entendu??
		if(this.perso1.territoires_conquis >= tabObjets.size()*0.1) {
			//if(this.ok == true) {
			//	Audio.playSound("gagne3");
			//	this.ok = false;
			//}
			this.gagnant = "Joueur 1";
			return true;}
		else if(this.perso2.territoires_conquis >= tabObjets.size()*0.1) {
			//if(this.ok == true) {
			//	Audio.playSound("gagne3");
			//	this.ok = false;
			//}
			this.gagnant = "Joueur 2";
			return true;}
		else
			return false;
	}
	
	
	private boolean finDePartie() {
		if(this.partieGagnee() == true){
			Fenetre.fermer_boutons();
			return true;}
		
		else {return false;}
	}

	//méthode gérant la peinture de l'écran
	@SuppressWarnings("exports")
	public void paintComponent(Graphics g) { 
		super.paintComponent(g);
		Graphics gc = (Graphics2D)g;
		
		//*** TRANSLATION *** this.Deplacmtfond();
		//*** TRANSLATION *** this.Deplacmtvaisseau();
		//*** TRANSLATION *** déplacement des astres
		/*for(int i=0; i< this.tabObjets.size(); i++) {this.tabObjets.get(i).deplacement();} */
		gc.drawImage(this.ImFond, this.xFond, this.yFond, null); 
		
		// tracé des astres
		for(int i=0; i<this.tabObjets.size();i++) {
			gc.drawImage(this.tabObjets.get(i).getImgObj(), this.tabObjets.get(i).getX(),this.tabObjets.get(i).getY(),null);
			int X = tabObjets.get(i).getX();
			int Y = tabObjets.get(i).getY();
			gc.setColor(Color.WHITE);
			gc.drawString(tabObjets.get(i).getNom(), X+15, Y+30);
			gc.drawString(Integer.toString( tabObjets.get(i).getTaille()), X+20, Y+40);
		}
		
		//tracé de la grille
		gc.drawRect(xrect1, yrect1, taille_case_x,taille_case_y); 
		this.création_grille(gc); 
		
		// déplacement des coordonnées des perso
		int X1 = perso1.getX();
		int Y1 = perso1.getY();
		int X2 = perso2.getX();
		int Y2 = perso2.getY();
		
		//déplacement des images des perso
		gc.drawImage(this.perso1.getImgObj(),X1,Y1,null); 
		gc.drawString("Joueur1", X1, Y1+20);
		gc.drawImage(this.perso2.getImgObj(),X2,Y2,null); 
		gc.drawString("Joueur2", X2+20, Y2+20);
		
		//fin de partie  
		if(this.finDePartie() == true)
			gc.setFont(Fenetre.policeFin); //problème ici: pas de changement de police..
			if(this.partieGagnee() == true)
				gc.drawString("Le " + this.gagnant + " a gagné, bravo à lui!! ", 100, 100);
	}
}
